(function () {
  'use strict';

  function Springify(){
  var arguments$1 = arguments;
  for(var a=this,i=[],t=arguments.length;t--;){ i[t]=arguments$1[t]; }this.animating=!1;var n,e,p,o,m=10,s=30,u=20,r={input:0,output:0,velocity:0,amplitude:0},c=[],f=function(a,i,t){return a*(t-i)/100+i};i.map(function(i){void 0!==i.propName?(a[i.propName]=Object.assign({},r),a[i.propName].stiffness=i.stiffness||m,a[i.propName].damping=i.damping||s,a[i.propName].mass=i.mass||u,c.push(a[i.propName])):a.callback=i;});this.animate=function(){var i;e=Date.now(),a.animating||(n=e-1),p=e-n,n=e,a.animating=!0,c.forEach(function(a){var i,t,n,e,o,m;t=f((i=a).stiffness,-1,-300),n=f(i.damping,-.4,-20),e=f(i.mass,.1,10),o=t*(i.output-i.input),m=n*i.velocity,i.amplitude=(o+m)/e,i.velocity+=i.amplitude*(p/1e3),i.output+=i.velocity*(p/1e3);}),(i=a).callback.apply(i,c),c.every(function(a){return Math.abs(a.velocity)<.5&&Math.abs(a.output-a.input)<.5})?(a.animating=!1,console.log("finished spring animation")):(cancelAnimationFrame(o),o=requestAnimationFrame(a.animate));};}

  console.log("Index.js file ðŸ˜Ž");

  // Example helicopter
  var helicopter = document.querySelector(".helicopter");
  var helicopterDemo = document.querySelector(".section--example-helicopter");

  var helicopterCallback = function (x, y) {
    // Do any calculations and and adjustments in the callback function because this uses requestAnimationFrame inside Springify.

    // normalize the coordinates to the helicopter demo area
    var helicopterDemoRect = helicopterDemo.getBoundingClientRect();
    var relativeX =
      x.output - (helicopterDemoRect.left + helicopterDemoRect.width * 0.5);

    var relativeY =
      y.output - (helicopterDemoRect.top + helicopterDemoRect.height * 0.5);

    // Apply these to our helicopter
    helicopter.style.transform = "translate(" + relativeX + "px, " + relativeY + "px) rotate(" + (x.velocity *
      0.05) + "deg)";
  };

  var springyHelicopter = new Springify(
    {
      propName: "x",
    },
    {
      propName: "y",
    },
    helicopterCallback
  );

  helicopterDemo.addEventListener("mousemove", function (e) {
    // Just input the raw data here, no extra calculations for maximum efficiency.
    springyHelicopter.x.input = e.clientX;
    springyHelicopter.y.input = e.clientY;

    // If the Springify instance is not already animating then start animating again
    if (!springyHelicopter.animating) {
      springyHelicopter.animate();
    }
  });

  // End helicopter demo




  var boxes = document.querySelectorAll(".box");
  var boxOne = boxes[0];
  var boxTwo = boxes[1];
  var boxThree = boxes[2];

  var arm = document.querySelector(".box-child");

  // const springyBox = new Springify(
  //   {
  //     propName: "x",
  //     stiffness: 10,
  //     damping: 30,
  //     mass: 20,
  //   },
  //   {
  //     propName: "y",
  //   },
  //   callback
  // );

  // document.addEventListener("mousemove", e => {
  //   springyBox.x.input = e.clientX;
  //   springyBox.y.input = e.clientY;

  //   if (!springyBox.animating) {
  //     requestAnimationFrame(springyBox.animate);
  //   }
  // });

  // document.addEventListener("click", e => {
  //   springyBox.x.input = e.clientX;
  //   springyBox.y.input = e.clientY;

  //   if (!springyBox.animating) {
  //     requestAnimationFrame(springyBox.animate);
  //   }
  // });

}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,
